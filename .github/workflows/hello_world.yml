# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # XCode 11.7を使う
      - name: Select Xcode version
        run: sudo xcode-select -s '/Applications/Xcode_11.7.app/Contents/Developer'
      
      # XCodeのバージョン出力
      - name: Show Xcode version
        run: xcodebuild -version
        
      # Javaのinstall
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      
      # cacheの利用
      - uses: actions/cache@v1
        with: 
          path: /Users/runner/hostedtoolcache/flutter
          key: ${{runner.OS}}-flutter-install-cache
      
      # flutterのインストール
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '1.20.2'
          channel: 'stable'
          
      # flutter dependencies install
      - run: flutter pub get
      - run: flutter build apk
  
      # 証明書関連のファイルを生成します
      - name: Import Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          touch ~/Library/MobileDevice/Provisioning\ Profiles/decoded.mobileprovision
          echo -n '${{ secrets.PROVISIONING_PROFILE }}' | base64 -d -o ~/Library/MobileDevice/Provisioning\ Profiles/decoded.mobileprovision
          
      # 署名をします
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}
      - run: flutter build ios
      
      # 頑張ってipaを出力します
      - name: XCode Build Archive
        uses: yukiarrr/ios-build-action@v0.5.0
        with:
          project-path: ios/Runner.xcodeproj
          p12-base64: ${{ secrets.CERTIFICATES_P12 }}
          mobileprovision-base64: ${{ secrets.PROVISIONING_PROFILE }}
          code-signing-identity: iOS Distribution
          team-id: ${{ secrets.TEAM_ID }}
          workspace-path: ios/Runner.xcworkspace
          export-method: ad-hoc
          output-path: app-release.ipa

      # ipaをdeploygate経由で配布します
      - name: Distribute iOS app
        run: |
          curl \
            -H "Authorization: token ${{secrets.DEPLOYGATE_API_KEY}}" \
            -F "file=@app-release.ipa" \
            -F "message=git:$GIT_HASH" \
            -F "distribution_name=$GIT_BRANCH" \
            -F "release_note=new ios build" \
            -F "distribution_key=${{secrets.DEPLOYGATE_DIST_PAGE_HASH}}" \
            "https://deploygate.com/api/users/${{secrets.DEPLOYGATE_USER}}/apps"
      - name: Distribute Android app
        run: | 
          curl \
            -H "Authorization: token ${{secrets.DEPLOYGATE_API_KEY}}" \
            -F "file=@build/app/outputs/flutter-apk/app-release.apk" \
            -F "message=git:$GIT_HASH" \
            -F "distribution_name=$GIT_BRANCH" \
            -F "release_note=new build" \
            -F "distribution_key=${{secrets.DEPLOYGATE_DIST_PAGE_HASH}}" \
            "https://deploygate.com/api/users/${{secrets.DEPLOYGATE_USER}}/apps"
